
import { GoogleGenAI, Modality } from "@google/genai";

/**
 * Generates a logo image using the Gemini API based on a text prompt.
 * @param prompt The text description of the logo.
 * @returns A base64 encoded data URL of the generated image (e.g., "data:image/png;base64,...").
 */
export const generateLogo = async (prompt: string): Promise<string> => {
  // A new GoogleGenAI instance must be created for each request to ensure the
  // latest API key from the environment is used.
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            text: `Generate a high-resolution, modern, vector-style logo on a transparent or simple white background for: ${prompt}. The logo should be simple, memorable, and suitable for a brand. Avoid complex details and text unless specified in the prompt.`,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API. Please try a different prompt.");
  } catch (error) {
    console.error("Error generating logo:", error);
    if (error instanceof Error) {
        // The raw error message from the API can be useful for debugging,
        // so we'll pass it along.
        throw new Error(`Failed to generate logo: ${error.message}`);
    }
    throw new Error("An unknown error occurred while generating the logo.");
  }
};
